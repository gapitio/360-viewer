{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "DataHotspot.svelte",
    "InfoHotspot.svelte",
    "SceneHotspot.svelte",
    "PanoramaViewer.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">export let type;\nexport let value;\nconst types = {\n    flow: {\n        color: \"#7a36d2\",\n        unit: \"L/h\",\n    },\n    energy: {\n        color: \"#17C1B6\",\n        unit: \"kWh\",\n    },\n    power: {\n        color: \"#48ADE0\",\n        unit: \"kW\",\n    },\n    temperature: {\n        color: \"#D648E0\",\n        unit: \"Â°C\",\n    },\n};\nlet elt;\n// setInterval(() => {\n//   value = (Math.random() * 1000).toFixed(2);\n// }, 1000);\n</script>\n\n<style>\n  div {\n    color: white;\n    width: 200px;\n    transform: translate(-50%, -50%);\n  }\n  .type {\n    text-transform: uppercase;\n  }\n</style>\n\n<div bind:this={elt}>\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\"\n    height=\"100%\"\n    viewBox=\"0 0 214 70\">\n    <g transform=\"translate(-652 -547)\">\n      <g\n        transform=\"translate(657 552)\"\n        fill=\"#1b191c\"\n        stroke={types[type].color}\n        stroke-width=\"5\"\n        opacity=\"0.88\">\n        <rect width=\"204\" height=\"60\" stroke=\"none\" />\n        <rect x=\"-2.5\" y=\"-2.5\" width=\"209\" height=\"65\" fill=\"none\" />\n      </g>\n      <text\n        class=\"type\"\n        transform=\"translate(669 573)\"\n        fill=\"#d6d6d6\"\n        font-size=\"16\"\n        font-family=\"OpenSans, Open Sans\"\n        letter-spacing=\"0.01em\">\n        <slot name=\"title\">{type}</slot>\n      </text>\n      <text\n        class=\"value\"\n        transform=\"translate(669 602)\"\n        fill=\"#fcfcfc\"\n        font-size=\"26\"\n        font-family=\"OpenSans-Semibold, Open Sans\"\n        font-weight=\"600\">\n        <slot name=\"value\">{value}</slot>\n        <slot name=\"unit\">{` ${types[type].unit}`}</slot>\n        <slot />\n      </text>\n    </g>\n  </svg>\n</div>\n",
    "<script lang=\"ts\">\"use strict\";\nlet elt;\n</script>\n\n<style>\n  div {\n    color: white;\n  }\n</style>\n\n<div bind:this={elt} class=\"hotspot\">Hello</div>\n",
    "<script lang=\"ts\">export let func;\n</script>\n\n<style>\n  div {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n    width: 80px;\n    cursor: pointer;\n  }\n</style>\n\n<div class=\"hotspot\" on:click={func}>\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\"\n    height=\"100%\"\n    viewBox=\"0 0 95 95\">\n    <g id=\"Group_2\" data-name=\"Group 2\" transform=\"translate(-1406 -828)\">\n      <circle\n        id=\"Ellipse_1\"\n        data-name=\"Ellipse 1\"\n        cx=\"47.5\"\n        cy=\"47.5\"\n        r=\"47.5\"\n        transform=\"translate(1406 828)\"\n        fill=\"#1b191c\"\n        opacity=\"0.88\" />\n      <path\n        id=\"Path_1\"\n        data-name=\"Path 1\"\n        d=\"M846.277,2011.457l19.539-19.539,19.539,19.539\"\n        transform=\"translate(587.223 -1126.417)\"\n        fill=\"none\"\n        stroke=\"#f5f5f5\"\n        stroke-width=\"5\" />\n    </g>\n  </svg>\n</div>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport DataHotspot from \"../../hotspot/DataHotspot.svelte\";\nimport InfoHotspot from \"../../hotspot/InfoHotspot.svelte\";\nimport SceneHotspot from \"../../hotspot/SceneHotspot.svelte\";\nimport { onMount } from \"svelte\";\nimport Marzipano from \"marzipano\";\nimport InfluxData from \"../../Data/InfluxData.svelte\";\nimport RandomData from \"../../Data/RandomData.svelte\";\nlet container;\nlet panoramaContainer;\nlet config;\nlet scenes = [];\nlet currentSceneIndex = 0;\nconst baseURL = window.location.href;\nconst configPath = baseURL + \"/config.json\";\nfunction getConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const config = yield fetch(baseURL + \"/config.json\")\n            .then((response) => response.json())\n            .catch((e) => {\n            console.warn(\"Failed to fetch config from \" + configPath);\n        });\n        return config;\n    });\n}\nfunction switchScene(scene) {\n    // Display scene.\n    scene.switchTo();\n}\n$: if (currentSceneIndex != null && scenes.length > 0) {\n    switchScene(scenes[currentSceneIndex].scene);\n}\nfunction addHotspot(hotspot) {\n    const sceneIndex = hotspot.dataset.sceneIndex;\n    if (sceneIndex) {\n        scenes[Number(sceneIndex)].scene.hotspotContainer().createHotspot(hotspot, {\n            yaw: Number(hotspot.dataset.yaw),\n            pitch: Number(hotspot.dataset.pitch),\n        }, {\n            perspective: {\n                extraTransforms: \"rotateZ(-0.5deg)\",\n            },\n        });\n    }\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    const viewer = new Marzipano.Viewer(panoramaContainer);\n    config = yield getConfig();\n    if (config && config.scenes) {\n        for (const sceneConfig of config.scenes) {\n            // Create source.\n            const source = Marzipano.ImageUrlSource.fromString(baseURL + sceneConfig.url);\n            // Create geometry.\n            const geometry = new Marzipano.EquirectGeometry([{ width: 4096 }]);\n            // Create view.\n            const limiter = Marzipano.RectilinearView.limit.traditional(1024, (100 * Math.PI) / 180);\n            const view = new Marzipano.RectilinearView({ yaw: 0 }, limiter);\n            // Create scene.\n            const scene = viewer.createScene({\n                source: source,\n                geometry: geometry,\n                view: view,\n                pinFirstLevel: true,\n            });\n            scenes = [...scenes, { name: sceneConfig.name, scene: scene }];\n        }\n    }\n    panoramaContainer.addEventListener(\"click\", (e) => {\n        console.log(scenes[currentSceneIndex].scene\n            .view()\n            .screenToCoordinates({ x: e.x, y: e.y }));\n    });\n}));\n</script>\n\n<style>\n  .panorama-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  .scene-list {\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #fcfcfc;\n  }\n  .scene-list ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n  .scene-list input {\n    display: none;\n  }\n  .scene-list label {\n    background-color: #1b191c55;\n    display: block;\n    padding: 10px 16px;\n  }\n  .scene-list label:hover {\n    background-color: #1b191ce0;\n  }\n  .scene-list label.active {\n    background-color: #1b191cbb;\n  }\n</style>\n\n<div bind:this={container}>\n  <div bind:this={panoramaContainer} class=\"panorama-container\" />\n  {#if config && scenes.length > 0}\n    {#each config.scenes as sceneConfig, sceneIndex}\n      {#each sceneConfig.hotspots as hotspotConfig}\n        {#if currentSceneIndex == sceneIndex}\n          <div\n            data-scene-index={sceneIndex}\n            use:addHotspot\n            data-yaw={hotspotConfig.yaw}\n            data-pitch={hotspotConfig.pitch}\n            data-extra-transforms={hotspotConfig.extraTransforms}>\n            {#if hotspotConfig.type == 'data'}\n              <DataHotspot type={hotspotConfig.dataType} value={252}>\n                <tspan slot=\"title\">{hotspotConfig.title}</tspan>\n                <tspan slot=\"value\">\n                  {#if hotspotConfig.data.database && config.databases && config.databases[hotspotConfig.data.database]}\n                    {#if config.databases[hotspotConfig.data.database].type == 'influx'}\n                      <InfluxData\n                        url={config.databases[hotspotConfig.data.database].url ?? ''}\n                        token={config.databases[hotspotConfig.data.database].token ?? ''}\n                        organization={config.databases[hotspotConfig.data.database].organization ?? ''}\n                        query={hotspotConfig.data.query ?? ''} />\n                    {/if}\n                    {#if config.databases[hotspotConfig.data.database].type == 'random'}\n                      <RandomData />\n                    {/if}\n                  {/if}\n                </tspan>\n              </DataHotspot>\n            {:else if hotspotConfig.type == 'scene'}\n              <SceneHotspot\n                func={() => {\n                  currentSceneIndex = hotspotConfig.sceneIndex;\n                }} />\n            {:else if hotspotConfig.type == 'info'}\n              <InfoHotspot />\n            {/if}\n          </div>\n        {/if}\n      {/each}\n    {/each}\n  {/if}\n</div>\n\n<div class=\"scene-list\">\n  <ul>\n    {#each scenes as sceneConfig, sceneIndex}\n      <li>\n        <label class={sceneIndex == currentSceneIndex ? 'active' : ''}><input\n            type=\"radio\"\n            bind:group={currentSceneIndex}\n            value={sceneIndex} />\n          {sceneConfig.name}</label>\n      </li>\n    {/each}\n  </ul>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA2BE,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,AAClC,CAAC,AACD,KAAK,cAAC,CAAC,AACL,cAAc,CAAE,SAAS,AAC3B,CAAC;AC7BD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,AACd,CAAC;ACHD,GAAG,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACjB,CAAC;ACyED,mBAAmB,4BAAC,CAAC,AACnB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,WAAW,4BAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,yBAAW,CAAC,EAAE,cAAC,CAAC,AACd,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,yBAAW,CAAC,KAAK,cAAC,CAAC,AACjB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,yBAAW,CAAC,KAAK,cAAC,CAAC,AACjB,gBAAgB,CAAE,SAAS,CAC3B,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,IAAI,CAAC,IAAI,AACpB,CAAC,AACD,yBAAW,CAAC,mBAAK,MAAM,AAAC,CAAC,AACvB,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AACD,yBAAW,CAAC,KAAK,OAAO,cAAC,CAAC,AACxB,gBAAgB,CAAE,SAAS,AAC7B,CAAC"
}